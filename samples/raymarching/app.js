require(["Core/Engine","Core/Node","Components/Camera","Components/CameraController","Passes/RenderPass","Passes/UpdatePass","Renderer/BackBufferTarget","Utils/MeshHelper"],function(e,i,o,t,n,r,a,s){"use strict";var c=new e(document.getElementById("webgl2"),{antialias:!0}),u=s.createFullscreenQuad(c),l=new i(c,"quad"),p=new i(c,"camera"),v=c.resourceManager.createShader({vs:["precision highp float;","attribute vec3 aPosition;","varying vec2 vPosition;","void main()","{","	gl_Position = vec4(aPosition, 1);","	vPosition = aPosition.xy;","}"],fs:["precision highp float;","varying vec2 vPosition;","uniform vec3 uPosition;","uniform vec3 uDirection;","uniform mat4 uInverseViewProjection;","float Union(float d1, float d2)","{","	return d1 < d2 ? d1 : d2;","}","float plane(vec3 position)","{","	return position.y;","}","float sphere(vec3 position, float radius, vec3 center)","{","	return length(position - center) - radius;","}","float cube(vec3 position, vec3 size)","{","	return length(max(abs(position) - size, 0.0));","}","mat3 setupCamera()","{","	vec3 z = normalize(uDirection);","	vec3 x = cross(z, vec3(0.0, 1.0, 0.0));","	vec3 y = cross(x, z);","	return mat3(x, y, z);","}","float trace(vec3 position, vec3 direction)","{","	float tMax = 20.0;","	float tMin = 0.002;","	float t = 0.1;","	for (int i = 0; i < 50; ++i) {","		vec3 point = position + direction * t;","		float result = sphere(point, 1.0, vec3(0.0, 1.5, 0.0));","		result = Union(result, cube(point, vec3(1.0, 0.5, 1.0)));","		result = Union(result, plane(point));","		if (result < tMin || t > tMax) { break; }","		t += result;","	}","	return 1.0 - t / tMax;","}","void main()","{","	vec4 position = uInverseViewProjection * vec4(vPosition, -1.0, 1.0);","	position.xyz /= position.w;","	float distance = trace(position.xyz, normalize(position.xyz - uPosition));","	gl_FragColor = vec4(vec3(distance), 1.0);","}"],attributes:[{semantic:"position",name:"aPosition"}],uniforms:[{name:"uPosition",reference:"cameraPosition"},{name:"uDirection",reference:"cameraDirection"},{name:"uInverseViewProjection",reference:"inverseViewProjection"}]});u.setShader(v),v.release(),p.addComponent(new o(c)),p.addComponent(new t(c,{position:[1.5,2,5],target:[0,1,0]})),c.sceneGraph.addChild(p),c.passes.push(new n(c,{renderTarget:new a(c),camera:p.getComponent("Camera")})),l.addComponent(u),c.sceneGraph.addChild(l),c.passes.push(new r(c)),c.start()});