require(["Core/Engine","Core/Node","Components/Camera","Components/CameraController","Passes/RenderPass","Passes/UpdatePass","Renderer/BackBufferTarget","Utils/MeshHelper"],function(e,t,i,o,n,a,r,s){"use strict";function c(e,t,i){var o=e.resourceManager.createShader({vs:["precision highp float;","attribute vec3 aPosition;","varying vec2 vPosition;","void main()","{","	gl_Position = vec4(aPosition, 1);","	vPosition = aPosition.xy;","}"],fs:["precision highp float;","varying vec2 vPosition;","uniform vec3 uPosition;","uniform mat4 uInverseViewProjection;","uniform float uTime;","uniform float uMin;","uniform float uMax;","uniform float uPrecision;","float Union(float d1, float d2)","{","	return d1 < d2 ? d1 : d2;","}","float Plane(vec3 position)","{","	return position.y;","}","float Sphere(vec3 position, float radius, vec3 center)","{","	return length(position - center) - radius;","}","float Cube(vec3 position, vec3 size)","{","	return length(max(abs(position) - size, 0.0));","}","float RotatedCube(vec3 position, vec3 size, mat3 rotation)","{","	vec3 tPosition = rotation * position;","	return Cube(tPosition, size);","}","mat3 RotationMatrix(float angle)","{","	return mat3(","		vec3(cos(angle), 0.0, -sin(angle)),","		vec3(0.0, 1.0, 0.0),","		vec3(sin(angle), 0.0, cos(angle))","	);","}","float trace(vec3 position, vec3 direction)","{","	float t = uMin;","	mat3 rotation = RotationMatrix(uTime);","	for (int i = 0; i < "+i.iterations+"; ++i) {","		vec3 point = position + direction * t;","		float result = Sphere(point, 1.0, vec3(0.0, 1.5, 0.0));","		result = Union(result, RotatedCube(point, vec3(1.0, 0.5, 1.0), rotation));","		result = Union(result, Plane(point));","		if (result < uPrecision || t > uMax) { break; }","		t += result;","	}","	return 1.0 - t / uMax;","}","void main()","{","	vec4 position = uInverseViewProjection * vec4(vPosition, -1.0, 1.0);","	position.xyz /= position.w;","	float distance = trace(position.xyz, normalize(position.xyz - uPosition));","	gl_FragColor = vec4(vec3(distance), 1.0);","}"],attributes:[{semantic:"position",name:"aPosition"}],uniforms:[{name:"uPosition",reference:"cameraPosition"},{name:"uInverseViewProjection",reference:"inverseViewProjection"},{name:"uTime",reference:"time"},{name:"uMin",type:"float",object:i,attribute:"min"},{name:"uMax",type:"float",object:i,attribute:"max"},{name:"uPrecision",type:"float",object:i,attribute:"precision"}]});t.setShader(o),o.release()}var u=document.getElementById("gui"),l=new dat.GUI({width:u.clientWidth,autoPlace:!1}),d=new e(document.getElementById("webgl2"),{antialias:!0}),m=s.createFullscreenQuad(d),p=new t(d,"quad"),f=new t(d,"camera"),v={min:.1,max:20,precision:.002,iterations:50};c(d,m,v),f.addComponent(new i(d)),f.addComponent(new o(d,{position:[1.5,2,8],target:[0,1,0]})),d.sceneGraph.addChild(f),d.passes.push(new n(d,{renderTarget:new r(d),camera:f.getComponent("Camera")})),p.addComponent(m),d.sceneGraph.addChild(p),d.passes.push(new a(d)),u.appendChild(l.domElement),l.add(v,"min"),l.add(v,"max"),l.add(v,"precision"),l.add(v,"iterations").onChange(function(){c(d,m,v)}),d.start()});